on:
  push:
    branches:
      - main
  pull_request:
name: Tests
jobs:
  test:
    strategy:
      matrix:
        go:
          - version: 1.18
            report: true
          - version: 1.17
    runs-on: ubuntu-latest
    container:
      image: golang:${{ matrix.go.version }}
    services:
      phoenix:
        image: boostport/hbase-phoenix-all-in-one:2.0-5.0

      mysql:
        image: mysql:8
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
        options: --health-cmd "while ! mysql -e \"select 1\" -uroot >/dev/null 2>&1; do sleep 1; done" --health-interval 10s --health-timeout 5s --health-retries 5

      postgres:
        image: postgres:13-alpine
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Install code climate
        if: matrix.go.report == true && github.ref == 'refs/heads/main'
        run: |
          wget -O /tmp/cc-test-reporter https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64
          chmod +x /tmp/cc-test-reporter
          /tmp/cc-test-reporter before-build
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run golangci-lint checks
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          go install github.com/golangci/golangci-lint/cmd/golangci-lint
          make sanity-check
      - name: Run tests
        if: matrix.go.report != true
        env:
          PHOENIX_HOST: http://phoenix:8765
          MYSQL_HOST: mysql:3306
          POSTGRES_HOST: postgres:5432
        run: |
          find . -name go.mod -execdir go test -v ./... ';'
      - name: Run tests with coverage
        if: matrix.go.report == true && github.ref == 'refs/heads/main'
        env:
          PHOENIX_HOST: http://phoenix:8765
          MYSQL_HOST: mysql:3306
          POSTGRES_HOST: postgres:5432
        run: |
          echo 0 > /tmp/GO_EXIT_CODE
          modulesFound=$(find . -name 'go.mod' -type f -exec dirname {} \;)
          count=0
          pwd=$(pwd)
          
          for mod in $modulesFound; do
            cd $mod
            go test -coverprofile c.out -v ./...
            exitCode=$?
            if [ $exitCode -ne 0 ]; then echo $exitCode > /tmp/GO_EXIT_CODE; fi
            /tmp/cc-test-reporter format-coverage -t gocov -o /tmp/coverage/$count.json --prefix $(go list) c.out
            count=$((count+1))
            cd $pwd
          done

      - name: Send results to code climate
        if: matrix.go.report == true && github.ref == 'refs/heads/main'
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
        run: |
          exitCode=`cat /tmp/GO_EXIT_CODE`
          if [ $exitCode -eq 0 ]; then 
            /tmp/cc-test-reporter sum-coverage /tmp/coverage/*.json -p 6
            /tmp/cc-test-reporter upload-coverage
          fi